package com.today.cart.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.today.cart.vo.CartVO;
import com.today.io.db.DB;
import com.today.order.vo.OrderVO;

public class CartDAOImpl implements CartDAO{

	private Connection con = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	
	@Override
	public List<CartVO> list() throws Exception {
		System.out.println("CartDAOImpl.list()");
		List<CartVO>list = null;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = " select c.cartNo, g.Name_kr, g.Goodsview, c.quantity, g.goodsNo, g.goodsDiv, g.price "
					+ " , g.fileName, go.cup_size, go.cup, go.syrup, go.heating, go.optionNo, c.totalPrice "
					+ " from cart c,goods g, goods_option go , member m "
					+ " where c.id = m.id and c.goodsNo = g.goodsNo and c.optionNo = go.optionNo"
					+ " order by cartNo desc ";
			System.out.println("sql"+sql);
			// 4. 실행객체
			pstmt = con.prepareStatement(sql);
//			pstmt.setString(1, id);
			System.out.println("4.실행객체");
			// 5. 실행
			rs = pstmt.executeQuery();
			System.out.println("5.실행");
			// 6. 데이터 저장
			if(rs != null) {
				while(rs.next()) {
					if(list == null)list = new ArrayList<>();
					CartVO vo = new CartVO();
					vo.setCartNo(rs.getLong("cartNo"));
					vo.setName_kr(rs.getString("name_kr"));
					vo.setGoodsview(rs.getString("goodsview"));
					vo.setQuantity(rs.getLong("quantity"));
					vo.setGoodsNo(rs.getLong("goodsNo"));
					vo.setGoodsDiv(rs.getString("goodsDiv"));
					vo.setPrice(rs.getString("price"));
					vo.setFileName(rs.getString("fileName"));
					vo.setOptionNo(rs.getLong("optionNo"));
					vo.setCup_size(rs.getString("cup_size"));
					vo.setCup(rs.getString("cup"));
					vo.setSyrup(rs.getString("syrup"));
					vo.setHeating(rs.getString("heating"));
					vo.setTotalPrice(rs.getLong("totalPrice"));
					// vo를 list에 담기
					list.add(vo);
				}// end of while()
				System.out.println("6.데이터 저장");
			}// end of if()
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("장바구니 리스트 DB 처리 중 오류 발생");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			System.out.println("7.닫기");
		}// end of t c f
		return list;
	}// end of list()

	public CartVO view(long no)throws Exception{
		CartVO vo = null;
		try {
			// 1 확인 2연결
			con = DB.getConnection();
			// 3 sql
			String sql = " select c.cartNo, g.Name_kr, g.Goodsview, c.quantity, g.goodsNo, g.goodsDiv, g.price "
					+ " , g.fileName, go.cup_size, go.cup, go.syrup, go.heating, c.totalPrice "
					+ " from cart c,goods g, goods_option go , member m "
					+ " where c.id = m.id and c.goodsNo = g.goodsNo and c.optionNo = go.optionNo "
					+ " and cartNo = ? ";
			System.out.println("123 :" + sql);
			// 4. 실행객체
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, no);
			// 5. 실행
			rs = pstmt.executeQuery();
			// 6. 데이터 저장
			if(rs != null && rs.next()) {
				vo = new CartVO();
				vo.setCartNo(rs.getLong("cartNo"));
				vo.setName_kr(rs.getString("name_kr"));
				vo.setGoodsview(rs.getString("goodsview"));
				vo.setQuantity(rs.getLong("quantity"));
				vo.setGoodsNo(rs.getLong("goodsNo"));
				vo.setGoodsDiv(rs.getString("goodsDiv"));
				vo.setPrice(rs.getString("price"));
				vo.setFileName(rs.getString("fileName"));
				vo.setCup_size(rs.getString("cup_size"));
				vo.setCup(rs.getString("cup"));
				vo.setSyrup(rs.getString("syrup"));
				vo.setHeating(rs.getString("heating"));
				vo.setTotalPrice(rs.getLong("totalPrice"));
			}// end of if
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			DB.close(con, pstmt, rs);
		}// end of t c f
		return vo;
	}// end of view()
	
	// 담기
	public int cartAdd(CartVO vo)throws Exception{
		int result = 0;
		try {
			// 연결
			con = DB.getConnection();
			// sql
			String sql = " insert into cart(cartNo, goodsNo, optionNo, quantity,id, totalPrice) "
						+ " values(cart_seq.nextval,?, ?, ?,?,?) ";
			// 실행객체
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getGoodsNo());
			pstmt.setLong(2, vo.getOptionNo());
			pstmt.setLong(3, vo.getQuantity());
			pstmt.setString(4, vo.getId());
			pstmt.setLong(5, vo.getTotalPrice());
			result = pstmt.executeUpdate(); 
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}finally {
			// 7. 닫기
			DB.close(con, pstmt,rs);
		}// end of t c f
		
		return result;
	}// end of cartAdd()
	
	// 수량 수정
	public int update(CartVO vo) throws Exception{
		int result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = " update cart set quantity = ? where cartNo = ?";
			// 4. 실행객체
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getQuantity());
			pstmt.setLong(2, vo.getCartNo());
			// 5. 실행
			result = pstmt.executeUpdate();
			// 6. 데이터 저장
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
		}// end of t c f
		return result;
	}// end of update()
		
	// 삭제
	public int delete(CartVO vo) throws Exception{
		int result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = " delete from cart where cartNo = ? ";
			// 4. 실행객체
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getCartNo());
			// 5. 실행
			result = pstmt.executeUpdate();
			// 6. 데이터 저장
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
		}// end of t c f
		return result;
	}// end of delete()
	// 전체 삭제
	public int Alldelete(CartVO vo) throws Exception{
		int result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = " delete from cart where id = ? ";
			// 4. 실행객체
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getId());
			// 5. 실행
			result = pstmt.executeUpdate();
			// 6. 데이터 저장
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
		}
		return result;	
	}
	
	// 옵션 담기
	public int optionAdd(CartVO vo) throws Exception {
		System.out.println("CartDAOImpl.optionAdd().vo : " + vo);
			
		int result = 0;
		try {
			con = DB.getConnection();
			String sql = " INSERT INTO goods_option (optionNo, goodsNo, cup_size, cup, syrup, heating,quantity) "
					+ " VALUES (goods_option_seq.nextval, ?, ?, ?, ?, ?, ?) ";
			System.out.println("sql : " + sql);
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getGoodsNo());
			pstmt.setString(2, vo.getCup_size());
			pstmt.setString(3, vo.getCup());
			pstmt.setString(4, vo.getSyrup());
			pstmt.setString(5, vo.getHeating());
			pstmt.setLong(6, vo.getQuantity());
			result = pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("옵션 등록 DB처리 중 오류 발생");
		} finally {
			DB.close(con, pstmt);
		}
		return result;
	}
	
	// optionNo 가져오는 메서드
		public CartVO optionView(CartVO vo) throws Exception {
			System.out.println("CartDAOImpl.optionView().vo : " + vo);
			CartVO ctViewVO = null;
			try {
				con = DB.getConnection();
				String sql = " SELECT optionNo FROM goods_Option WHERE goodsNo = ? AND";
				if (vo.getHeating() == null) {
					sql += " cup_size = ? AND cup = ? ANd syrup = ? ";
					pstmt = con.prepareStatement(sql);
					pstmt.setLong(1, vo.getGoodsNo());
					pstmt.setString(2, vo.getCup_size());
					pstmt.setString(3, vo.getCup());
					pstmt.setString(4, vo.getSyrup());
				} else {
					sql += " heating = ? ";
					pstmt = con.prepareStatement(sql);
					pstmt.setLong(1, vo.getGoodsNo());
					pstmt.setString(2, vo.getHeating());
				}
				rs = pstmt.executeQuery();
				if(rs != null && rs.next()) {
					ctViewVO = new CartVO();
					ctViewVO.setOptionNo(rs.getLong("optionNo"));
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new Exception("옵션 번호 불러오는 DB처리 중 오류 발생");
			} finally {
				DB.close(con, pstmt, rs);
			}
			return ctViewVO;
		}
}// end of cartDAOImpl class()
