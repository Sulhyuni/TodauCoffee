package com.today.order.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.today.io.db.DB;
import com.today.order.vo.OrderVO;
import com.webjjang.util.PageObject;

public class OrderDAOImpl implements OrderDAO{
	
	private Connection con = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	
	private String searchSQL(PageObject pageObject) {
		String sql = "";
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if(word != null && word.trim().equals("")) {
			sql += " AND (1=0 ";
			if(key.indexOf("n") >= 0 ) sql += " OR orderNo LIKE ? ";
			if(key.indexOf("s") >= 0 ) sql += " OR orderStatus LIKE ? ";
			sql += " ) ";

		}		
		return sql;
	}
	
	private int searchDataSet(PageObject pageObject, int idx) throws SQLException{
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if(word != null && word.trim().equals("")) {
			if(key.indexOf("n") >= 0) pstmt.setString(++idx, "%"+word+"%");
			if(key.indexOf("s") >= 0) pstmt.setString(++idx, "%"+word+"%");
		}
		return idx;
	}
	
	public long getTotalRow(PageObject pageObject) throws Exception {
		System.out.println("OrderDAOImpl.getTotalRow().object : " + pageObject);
		long totalRow = 0;
		try {
			con = DB.getConnection();
			String sql = " SELECT count(*) FROM orderTable ";
			sql += searchSQL(pageObject);
			System.out.println("OrderDAOImpl.getTotalRow().sql : " + sql);
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			idx = searchDataSet(pageObject, idx);
			rs = pstmt.executeQuery();
			if(rs != null && rs.next()) {
				totalRow = rs.getLong(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("주문내역 리스트를 위한 전체 데이터 개수 DB처리 중 오류 발생");
		} finally {
			DB.close(con, pstmt, rs);
		}
		return totalRow;
	}
	
	public List<OrderVO> list(PageObject pageObject) throws Exception {
		System.out.println("OrderDAOImpl.list()");
		List<OrderVO> list = null;
		try {
			con = DB.getConnection();
			String sql = " SELECT ot.orderNo, m.id, ot.orderDate, ot.orderPrice, ot.orderStatus "
					+ " FROM orderTable ot, member m " 
					+ " WHERE ot.id = m.id " ;
			sql += searchSQL(pageObject);
			sql += " ORDER BY orderNo DESC ";
			sql = " SELECT ROWNUM rnum, orderNo, id, orderDate, orderPrice, orderStatus "
					+ " FROM ( " + sql + " ) ";
			sql = " SELECT rnum, orderNo, id, orderDate, orderPrice, orderStatus "
					+ " FROM ( " + sql + " ) "
					+ " WHERE rnum BETWEEN ? and ? " ;
			System.out.println("OrderDAOImpl.list().sql : " + sql);
			int idx = 0;
			pstmt = con.prepareStatement(sql);
			idx = searchDataSet(pageObject, idx);
			pstmt.setLong(++idx, pageObject.getStartRow());
			pstmt.setLong(++idx, pageObject.getEndRow());
			rs = pstmt.executeQuery();
			if(rs != null) {
				while(rs.next()) {
					if(list == null) list = new ArrayList<>();
					OrderVO vo = new OrderVO();
					vo.setOrderNo(rs.getLong("orderNo"));
					vo.setId(rs.getString("id"));
					vo.setOrderDate(rs.getString("orderDate"));
					vo.setOrderPrice(rs.getLong("orderPrice"));
					vo.setOrderStatus(rs.getString("orderStatus"));
					list.add(vo);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("즈문내역 리스트 DB처리 중 오류 발생");
		} finally {
			DB.close(con, pstmt, rs);
		}
		return list;
	}
}
